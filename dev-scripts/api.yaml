openapi: 3.0.3
info:
  title: ScribeMate API
  version: 0.1.0
  description: >
    Backend API for ScribeMate MVP.
    Simple authentication system for user management.

servers:
  - url: https://yourdomain.com/api
    description: Production
  - url: http://localhost:3001/api
    description: Local development

tags:
  - name: Auth
    description: Authentication endpoints
  - name: AI Content
    description: AI-generated content endpoints

components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Invalid credentials
      required: [status, message]

    UserProfile:
      type: object
      properties:
        user_id:
          type: string
          example: usr_123
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: Jamie Example
        role:
          type: string
          example: user
      required: [user_id, email]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: hunter2
      required: [email, password]

    LoginSuccess:
      type: object
      properties:
        status:
          type: string
          example: success
        token:
          type: string
          description: Bearer token to authorise future requests
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        user:
          $ref: "#/components/schemas/UserProfile"
      required: [status, token, user]

    LogoutSuccess:
      type: object
      properties:
        status:
          type: string
          example: success
      required: [status]
    TopicSuggestRequest:
      type: object
      properties:
        industry:
          type: string
          minLength: 3
          maxLength: 80
          pattern: "^[a-zA-Z0-9\\s\\-.,!?():;\"'@#$%^&*+=_|\\/<>\\[\\]{}`~]+$"
          description: The industry or niche to suggest topics for (3-80 chars, keyboard-typable characters only)
          example: "private piano teaching"
      required: [industry]

    TopicSuggestResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        topics:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [Evergreen, Trending]
                description: Topic category type
                example: Evergreen
              topic:
                type: string
                description: The actual topic title
                example: "How to Make Piano Lessons Affordable Amid Rising Costs"
            required: [type, topic]
          description: List of suggested social media topics with their categories
          example: [{"type": "Evergreen", "topic": "How to Make Piano Lessons Affordable Amid Rising Costs"}, {"type": "Trending", "topic": "Effective Strategies for Teaching Neurodiverse Piano Students"}]
        created_at:
          type: string
          format: date-time
      required: [status, topics, created_at]

    PostGenerateRequest:
      type: object
      properties:
        topic:
          type: string
          minLength: 5
          maxLength: 160
          pattern: "^[a-zA-Z0-9\\s\\-.,!?():;\"'@#$%^&*+=_|\\/<>\\[\\]{}`~]+$"
          description: The topic to generate a post about (5-160 chars, keyboard-typable characters only)
          example: How To Make Piano Lessons Affordable Amid Rising Costs
        social_media:
          type: string
          enum: [facebook, linkedin, blog]
          description: Target social media platform
          example: facebook
        max_word_count:
          type: integer
          minimum: 5
          maximum: 2000
          description: Maximum word count for the generated post (5-2000 words)
        tone_guide:
          type: string
          pattern: "^[a-zA-Z0-9\\s\\-.,!?():;\"'@#$%^&*+=_|\\/<>\\[\\]{}`~]+$"
          description: Tone and style guide for the post (keyboard-typable characters only). Optional - if not provided, a default tone guide will be used.
          example: "professional yet friendly, educational"
        additional_context:
          type: string
          pattern: "^[a-zA-Z0-9\\s\\-.,!?():;\"'@#$%^&*+=_|\\/<>\\[\\]{}`~]+$"
          description: Additional context about the topic, target audience, or specific points to cover (keyboard-typable characters only). Optional - if not provided, no additional context will be used.
          example: "Focus on parents of young children, emphasize the value of music education"
      required: [topic, social_media, max_word_count]

    PostGenerateResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        post_content:
          type: string
          description: The generated social media post content
        word_count:
          type: integer
          description: Actual word count of the generated post
        created_at:
          type: string
          format: date-time
      required: [status, post_content, word_count, created_at]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate user credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Credentials valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"
        "401":
          description: Username or password incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example: { status: error, message: Invalid username or password }
        "429":
          description: Excessive request rate (rate-limited only in production hardening)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      tags: [Auth]
      summary: End current session
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: User identity for authorization
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutSuccess"
        "401":
          description: Unknown or invalid user_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/topics/suggest:
    post:
      tags: [AI Content]
      summary: Suggest trending social media topics for an industry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicSuggestRequest"
      responses:
        "200":
          description: Topics suggested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicSuggestResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error or OpenAI API failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/posts/generate:
    post:
      tags: [AI Content]
      summary: Generate a social media post for a specific topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostGenerateRequest"
      responses:
        "200":
          description: Post generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostGenerateResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error or OpenAI API failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


